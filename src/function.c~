#include <stdio.h>
#include "define.h"
#include "struct.h"

//Fonction which give an random integer in [0,c[ 
int rand_c(int c){
  return rand()%c;
}

/* FONCTIONS */

unsigned int distance(const struct board *b, unsigned int x, unsigned int y){
  /*Calculate the distance between two positions x and y.
    The distance max is 3.
    If x and y are neighbours, the distance is 1.
    Else if x and y have a neighbour in common, the distance is 2.
    Else the distance is 3.
   */
  int i;
  int k;
  int dist=0;
  if (x==y){
    printf("La tête à Toto !\n");
    return dist;
  }
  for(i=0;i<(*b).num_neighbours;i++){
    if(y==(*b).neighbours[x][i])
      return 1;
  }
  for(i=0;i<(*b).num_neighbours;i++){
    for(k=0;k<(*b).num_neighbours;k++){
      if((*b).neighbours[(*b).neighbours[x][i]][k]==y){
	return 2;
      }
    }
  }
  return 3;
}

unsigned int num_positions(const struct board *b){
  return (*b).num_positions;
}

int has_tag(const struct board *b,unsigned int position, unsigned int tag){
  int i;
  for(i=0; i<MAX_TAG; i++){
    if((*b).positions[position][i]==tag){
      return 1;
    }
  }
  return 0;
}

void print_board(const struct board *b, int num_tag){
  int n=num_positions(b);

  for (int i=0; i<n; i++){
    printf("Position %2d : [", i);
    for (int j=0; j<num_tag; j++){
      printf("%2d", (*b).positions[i][j]);
      
    }
    printf("]\n");
  }
}


/*CONSTRAINTS MONO-PELICAN*/


/*CONSTRAINTS BI-PELICAN*/



